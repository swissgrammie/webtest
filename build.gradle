
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
        classpath 'com.bmuschko:gradle-cargo-plugin:2.3'
    }
}


group 'cc.heirloom.demo'
version '1.0-SNAPSHOT'


apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'war'

war {
    exclude "classes"
    from( "../tpcc/resources", { into 'WEB-INF/classes'})
}

//add deployment tasks https://github.com/bmuschko/gradle-cargo-plugin
apply plugin: 'com.bmuschko.cargo'

cargoRunLocal.dependsOn assemble  //this will assemble the war every time we do the local deploy

//cargo config, download a local copy of tomcat
cargo {
    containerId = 'tomcat7x'

    // http://localhost:8080/onld/onld should bring up the screen..
    deployable {
        file = file("$buildDir/libs/webtest-1.0-SNAPSHOT.war")
        context = 'onld'
    }
    local {
        installer {
            installUrl = 'http://apache.osuosl.org/tomcat/tomcat-7/v7.0.84/bin/apache-tomcat-7.0.84.zip'
            downloadDir = file("$buildDir/download")
            extractDir = file("$buildDir/extract")
        }

        homeDir = file('$buildDir/extract/apache-tomcat-7.0.84/apache-tomcat-7.0.84')
        outputFile = file('build/output.log')
        timeout = 60000

        containerProperties {
                property 'cargo.tomcat.ajp.port', 8080
        }
    }

    remote {
    hostname = 'localhost'
    username = 'admin'
    password = 'password'
  }
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'javax.transaction', name: 'transaction-api', version: '1.1'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.0'
}


apply plugin: "com.jfrog.artifactory"

apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'

apply from: 'ecobol.gradle'

gretty {
    contextPath = '/onld'
}

task startDB {
    doFirst {
        println "starting the DB container"
    }
}


task stopDB {
    doFirst {
        println "stopping the DB container"
    }
}


project.afterEvaluate {
    project.tasks.appStart.dependsOn startDB
    project.tasks.appStop.dependsOn stopDB

}


