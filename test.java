/*
 * Elastic COBOL --> Java Source Code
 *
 * This is a cross-compiler generated Java source-code file whose original
 * source was a COBOL program of the same name.
 *
 * If you want to switch from COBOL maintenance to Java maintenance, you must:
 * 1. edit this file as you see fit,
 * 2. move the resultant file to the java_source folder, and
 * 3. delete the originally named COBOL source file.
 *
 * This program requires ecobol.jar and may also require etrans.jar to execute.
 * These are the Elastic COBOL runtime services (used under license).
 */

import com.heirloomcomputing.ecs.exec.*;

/*
 * PROGRAM-ID test
 * Compiled on 2018-01-21 at 16:36:06
 *
 * Generated by:
 * 
 * Elastic COBOL
 * V17.8.24 (Build Aug 29 2017 11:40:47)
 * Copyright (C) 2010-2017 Heirloom Computing
 */

@SuppressWarnings("all")
public class test extends CobolBase
implements ICobolProgram, com.heirloomcomputing.ecs.api.ICallTarget, com.heirloomcomputing.ecs.api.ICancelTarget , com.heirloomcomputing.etp.transaction.link.Linkable
{
    static public final String _programId="test";
    BreakClass breakPoint = new BreakClass();
    
    static // initializer
    {
        RuntimeEnvironment.setGlobalParameter("DT","1");
        Variable.completeInitialization();
    }
    
    static // initializer
    {
        RuntimeEnvironment.setGlobalParameter("DT","1");
        Variable.completeInitialization();
    }
    
    
    @SuppressWarnings("all")
    public class Lnk              implements Section
    {
        public void doDeclarations()
        {
            try
            {
                declarations();
            }
            catch(Exception _initializerException)
            {
                CobolException.runtimeError(_context,"INTERNAL ERROR: Cannot initialize variable storage for test section 'Lnk'",_initializerException);
            }
        }
        
        
        public void doInitializations()
        {
            eibtime_OF_dfheiblk=new PackedDecimalI();
            eibdate_OF_dfheiblk=new PackedDecimalI();
            eibtrnid_OF_dfheiblk=new Variable();
            eibtaskn_OF_dfheiblk=new PackedDecimalI();
            eibtrmid_OF_dfheiblk=new Variable();
            dfheigdi_OF_dfheiblk=new Binary();
            eibcposn_OF_dfheiblk=new Binary();
            eibcalen_OF_dfheiblk=new Binary();
            eibaid_OF_dfheiblk=new Variable();
            eibfn_OF_dfheiblk=new Variable();
            eibrcode_OF_dfheiblk=new Variable();
            eibds_OF_dfheiblk=new Variable();
            eibreqid_OF_dfheiblk=new Variable();
            eibrsrce_OF_dfheiblk=new Variable();
            eibsync_OF_dfheiblk=new Variable();
            eibfree_OF_dfheiblk=new Variable();
            eibrecv_OF_dfheiblk=new Variable();
            eibfil01_OF_dfheiblk=new Variable();
            eibatt_OF_dfheiblk=new Variable();
            eibeoc_OF_dfheiblk=new Variable();
            eibfmh_OF_dfheiblk=new Variable();
            eibcompl_OF_dfheiblk=new Variable();
            eibsig_OF_dfheiblk=new Variable();
            eibconf_OF_dfheiblk=new Variable();
            eiberr_OF_dfheiblk=new Variable();
            eiberrcd_OF_dfheiblk=new Variable();
            eibsynrb_OF_dfheiblk=new Variable();
            eibnodat_OF_dfheiblk=new Variable();
            eibresp_OF_dfheiblk=new Binary();
            eibresp2_OF_dfheiblk=new Binary();
            eibrldbk_OF_dfheiblk=new Variable();
            eibsend_OF_dfheiblk=new Variable();
            eiberrmsg_OF_dfheiblk=new Variable();
            dibver_OF_dfheiblk=new Variable();
            dibstat_OF_dfheiblk=new Variable();
            dibsegm_OF_dfheiblk=new Variable();
            dibseglv_OF_dfheiblk=new Variable();
            dibkfbl_OF_dfheiblk=new Binary();
            dibdbdnm_OF_dfheiblk=new Variable();
            dibdborg_OF_dfheiblk=new Variable();
            dfheiblk=new Variable();
            dfhcommarea=new Variable();
        }
        
        public void declarations()
        {
            final Memory _memory=this._memory;
            eibtime_OF_dfheiblk.declare(_memory,0,4,"eibtime",7,Intrinsic.sr_current_julian_time(),dfheiblk,null,eibdate_OF_dfheiblk,0x04400000);
            eibdate_OF_dfheiblk.declare(_memory,4,4,"eibdate",7,Intrinsic.sr_current_julian_date(),dfheiblk,null,eibtrnid_OF_dfheiblk,0x04400000);
            eibtrnid_OF_dfheiblk.declare(_memory,8,4,"eibtrnid",null,null,dfheiblk,null,eibtaskn_OF_dfheiblk,0x00000000);
            eibtaskn_OF_dfheiblk.declare(_memory,12,4,"eibtaskn",7,null,dfheiblk,null,eibtrmid_OF_dfheiblk,0x04400000);
            eibtrmid_OF_dfheiblk.declare(_memory,16,4,"eibtrmid",null,null,dfheiblk,null,dfheigdi_OF_dfheiblk,0x00000000);
            dfheigdi_OF_dfheiblk.declare(_memory,20,2,"dfheigdi",4,null,dfheiblk,null,eibcposn_OF_dfheiblk,0x04400000);
            eibcposn_OF_dfheiblk.declare(_memory,22,2,"eibcposn",4,null,dfheiblk,null,eibcalen_OF_dfheiblk,0x04400000);
            eibcalen_OF_dfheiblk.declare(_memory,24,2,"eibcalen",4,null,dfheiblk,null,eibaid_OF_dfheiblk,0x04400000);
            eibaid_OF_dfheiblk.declare(_memory,26,1,"eibaid",null,null,dfheiblk,null,eibfn_OF_dfheiblk,0x00000000);
            eibfn_OF_dfheiblk.declare(_memory,27,2,"eibfn",null,null,dfheiblk,null,eibrcode_OF_dfheiblk,0x00000000);
            eibrcode_OF_dfheiblk.declare(_memory,29,6,"eibrcode",null,null,dfheiblk,null,eibds_OF_dfheiblk,0x00000000);
            eibds_OF_dfheiblk.declare(_memory,35,8,"eibds",null,null,dfheiblk,null,eibreqid_OF_dfheiblk,0x00000000);
            eibreqid_OF_dfheiblk.declare(_memory,43,8,"eibreqid",null,null,dfheiblk,null,eibrsrce_OF_dfheiblk,0x00000000);
            eibrsrce_OF_dfheiblk.declare(_memory,51,8,"eibrsrce",null,null,dfheiblk,null,eibsync_OF_dfheiblk,0x00000000);
            eibsync_OF_dfheiblk.declare(_memory,59,1,"eibsync",null,null,dfheiblk,null,eibfree_OF_dfheiblk,0x00000000);
            eibfree_OF_dfheiblk.declare(_memory,60,1,"eibfree",null,null,dfheiblk,null,eibrecv_OF_dfheiblk,0x00000000);
            eibrecv_OF_dfheiblk.declare(_memory,61,1,"eibrecv",null,null,dfheiblk,null,eibfil01_OF_dfheiblk,0x00000000);
            eibfil01_OF_dfheiblk.declare(_memory,62,1,"eibfil01",null,null,dfheiblk,null,eibatt_OF_dfheiblk,0x00000000);
            eibatt_OF_dfheiblk.declare(_memory,63,1,"eibatt",null,null,dfheiblk,null,eibeoc_OF_dfheiblk,0x00000000);
            eibeoc_OF_dfheiblk.declare(_memory,64,1,"eibeoc",null,null,dfheiblk,null,eibfmh_OF_dfheiblk,0x00000000);
            eibfmh_OF_dfheiblk.declare(_memory,65,1,"eibfmh",null,null,dfheiblk,null,eibcompl_OF_dfheiblk,0x00000000);
            eibcompl_OF_dfheiblk.declare(_memory,66,1,"eibcompl",null,null,dfheiblk,null,eibsig_OF_dfheiblk,0x00000000);
            eibsig_OF_dfheiblk.declare(_memory,67,1,"eibsig",null,null,dfheiblk,null,eibconf_OF_dfheiblk,0x00000000);
            eibconf_OF_dfheiblk.declare(_memory,68,1,"eibconf",null,null,dfheiblk,null,eiberr_OF_dfheiblk,0x00000000);
            eiberr_OF_dfheiblk.declare(_memory,69,1,"eiberr",null,null,dfheiblk,null,eiberrcd_OF_dfheiblk,0x00000000);
            eiberrcd_OF_dfheiblk.declare(_memory,70,4,"eiberrcd",null,null,dfheiblk,null,eibsynrb_OF_dfheiblk,0x00000000);
            eibsynrb_OF_dfheiblk.declare(_memory,74,1,"eibsynrb",null,null,dfheiblk,null,eibnodat_OF_dfheiblk,0x00000000);
            eibnodat_OF_dfheiblk.declare(_memory,75,1,"eibnodat",null,null,dfheiblk,null,eibresp_OF_dfheiblk,0x00000000);
            eibresp_OF_dfheiblk.declare(_memory,76,4,"eibresp",8,null,dfheiblk,null,eibresp2_OF_dfheiblk,0x04400000);
            eibresp2_OF_dfheiblk.declare(_memory,80,4,"eibresp2",8,null,dfheiblk,null,eibrldbk_OF_dfheiblk,0x04400000);
            eibrldbk_OF_dfheiblk.declare(_memory,84,1,"eibrldbk",null,null,dfheiblk,null,eibsend_OF_dfheiblk,0x00000000);
            eibsend_OF_dfheiblk.declare(_memory,85,1,"eibsend",null,null,dfheiblk,null,eiberrmsg_OF_dfheiblk,0x00000000);
            eiberrmsg_OF_dfheiblk.declare(_memory,86,2013,"eiberrmsg",null,null,dfheiblk,null,dibver_OF_dfheiblk,0x00000000);
            dibver_OF_dfheiblk.declare(_memory,2099,2,"dibver",null,null,dfheiblk,null,dibstat_OF_dfheiblk,0x00000000);
            dibstat_OF_dfheiblk.declare(_memory,2101,2,"dibstat",null,null,dfheiblk,null,dibsegm_OF_dfheiblk,0x00000000);
            dibsegm_OF_dfheiblk.declare(_memory,2103,8,"dibsegm",null,null,dfheiblk,null,dibseglv_OF_dfheiblk,0x00000000);
            dibseglv_OF_dfheiblk.declare(_memory,2111,2,"dibseglv",null,null,dfheiblk,null,dibkfbl_OF_dfheiblk,0x00000000);
            dibkfbl_OF_dfheiblk.declare(_memory,2113,2,"dibkfbl",4,null,dfheiblk,null,dibdbdnm_OF_dfheiblk,0x04400000);
            dibdbdnm_OF_dfheiblk.declare(_memory,2115,8,"dibdbdnm",null,null,dfheiblk,null,dibdborg_OF_dfheiblk,0x00000000);
            dibdborg_OF_dfheiblk.declare(_memory,2123,8,"dibdborg",null,null,dfheiblk,null,null,0x00000000);
            dfheiblk.declare(_memory,0,2131,"dfheiblk",null,null,null,eibtime_OF_dfheiblk,dfhcommarea,0x00000000);
            dfhcommarea.declare(_memory,2131,1,"dfhcommarea",null,null,null,null,null,0x00000000);
            Variable.setUnusedVarsSizes(lnk.dfheiblk);
            
            
        } // end declarations
        
        public  PackedDecimalI eibtime_OF_dfheiblk;
        public  PackedDecimalI eibdate_OF_dfheiblk;
        public  Variable eibtrnid_OF_dfheiblk;
        public  PackedDecimalI eibtaskn_OF_dfheiblk;
        public  Variable eibtrmid_OF_dfheiblk;
        public  Binary dfheigdi_OF_dfheiblk;
        public  Binary eibcposn_OF_dfheiblk;
        public  Binary eibcalen_OF_dfheiblk;
        public  Variable eibaid_OF_dfheiblk;
        public  Variable eibfn_OF_dfheiblk;
        public  Variable eibrcode_OF_dfheiblk;
        public  Variable eibds_OF_dfheiblk;
        public  Variable eibreqid_OF_dfheiblk;
        public  Variable eibrsrce_OF_dfheiblk;
        public  Variable eibsync_OF_dfheiblk;
        public  Variable eibfree_OF_dfheiblk;
        public  Variable eibrecv_OF_dfheiblk;
        public  Variable eibfil01_OF_dfheiblk;
        public  Variable eibatt_OF_dfheiblk;
        public  Variable eibeoc_OF_dfheiblk;
        public  Variable eibfmh_OF_dfheiblk;
        public  Variable eibcompl_OF_dfheiblk;
        public  Variable eibsig_OF_dfheiblk;
        public  Variable eibconf_OF_dfheiblk;
        public  Variable eiberr_OF_dfheiblk;
        public  Variable eiberrcd_OF_dfheiblk;
        public  Variable eibsynrb_OF_dfheiblk;
        public  Variable eibnodat_OF_dfheiblk;
        public  Binary eibresp_OF_dfheiblk;
        public  Binary eibresp2_OF_dfheiblk;
        public  Variable eibrldbk_OF_dfheiblk;
        public  Variable eibsend_OF_dfheiblk;
        public  Variable eiberrmsg_OF_dfheiblk;
        public  Variable dibver_OF_dfheiblk;
        public  Variable dibstat_OF_dfheiblk;
        public  Variable dibsegm_OF_dfheiblk;
        public  Variable dibseglv_OF_dfheiblk;
        public  Binary dibkfbl_OF_dfheiblk;
        public  Variable dibdbdnm_OF_dfheiblk;
        public  Variable dibdborg_OF_dfheiblk;
        public  Variable dfheiblk;
        public  Variable dfhcommarea;
        
        
        protected final Memory _memory=new UnbufferedMemory(2132,"test.Lnk");
        
    } // end Lnk
    public transient Lnk lnk=null; // instance accessor for data section
    
    public java.lang.Object call(Context _passContext)
    {
        setup(_passContext);
        return callGiving();
    }
    
    public java.lang.Object call(Context _passContext,parameterList _param)
    {
        setup(_passContext);
        return callGiving(_param);
    }
    
    public void call()
    {
        if(_context==null) setup(_context);
        _context.setProgramCalled();
        run(-1,0); // parameters expected, leave at defaults
    } // end call
    
    public void call(parameterList _param)
    {
        if(_context==null) setup(_context);
        _context.setProgramCalled();
        try
        {
            lnk.dfheiblk.ipc_init(_param,0);
            lnk.dfhcommarea.ipc_init(_param,1);
            Context _prevContext=Variable.setCurrContext(_context);
            Variable.setNarg(_param);
            _callArrayInitializer();
            Variable[] _variables=new Variable[]
            {
                lnk.dfheiblk,lnk.dfhcommarea
            };
            Variable.ipc_ready(_variables);
            this.run(-1,0);
            Variable.ipc_finish(_variables,_param,_programId);
            _callArrayFinalizer();
            Variable.ipc_final(_variables,_param);
            Variable.setCurrContext(_prevContext);
        }
        catch(ArrayIndexOutOfBoundsException _linkingExceptionOuter)
        {
            CobolException.runtimeError("Linking Error in Initiation of "+_programId,_linkingExceptionOuter);
        }
    }
    
    public java.lang.Object callGiving()
    {
        call();
        return _context.getReturnCode();
    }
    
    public java.lang.Object call(boolean[] _byRef,java.lang.Object[] _param)
    {
        return callGiving(new parameterList(_byRef,_param));
    }
    
    public java.lang.Object callGiving(parameterList _param)
    {
        call(_param);
        return _context.getReturnCode();
    }
    
    static public final int _defaultsection_0_Label=1;
    static public final int _defaultpara_1_OF_defaultsection_0_Label=2;
    
    public int defaultpara_1_OF_defaultsection_0()
    {
        boolean _sizeError=false;
        _sizeError=!_context.defaultio().display(_context,(String)"hello world");
        if(_context.isProgramCalled()) throw new ExitProgramException("EXIT PROGRAM"); // exit program
        return 0; // fall through
    } // END DEFAULT PARAGRAPH
    
    public int defaultsection_0()
    {
        perform(1,1);
        return 0;
    }
    
    
    /**
     * Dfheiblk property (length 2131)
     * @return property value of Dfheiblk
     */
    public String getDfheiblk()
    {
        if(_context==null) setup(null);
        return lnk.dfheiblk.toText();
    }
    
    /**
     * Dfheiblk property (length 2131)
     * @return property value of Dfheiblk
     */
    public String getDfheiblkAsString()
    {
        if(_context==null) setup(null);
        return lnk.dfheiblk.toText();
    }
    
    /**
     * Dfhcommarea property (length 1)
     * @return property value of Dfhcommarea
     */
    public String getDfhcommarea()
    {
        if(_context==null) setup(null);
        return lnk.dfhcommarea.toText();
    }
    
    /**
     * Dfhcommarea property (length 1)
     * @return property value of Dfhcommarea
     */
    public String getDfhcommareaAsString()
    {
        if(_context==null) setup(null);
        return lnk.dfhcommarea.toText();
    }
    
    /**
     * Dfheiblk property (length 2131)
     * @param paramValue parameter property value of Dfheiblk
     */
    public void setDfheiblk(String _paramValue)
    {
        if(_context==null) setup(null);
        lnk.eibtime_OF_dfheiblk.move(_paramValue.length());
        lnk.eibdate_OF_dfheiblk.moveMax(_paramValue);
    }
    
    /**
     * Dfhcommarea property (length 1)
     * @param paramValue parameter property value of Dfhcommarea
     */
    public void setDfhcommarea(String _paramValue)
    {
        if(_context==null) setup(null);
        lnk.dfhcommarea.move(_paramValue);
    }
    public int getElasticCobolMajorVersion() { return 17; }
    public int getElasticCobolMinorVersion() { return 8; }
    public int getElasticCobolSubminorVersion() { return 24; }
    public String getElasticCobolBuildTimestamp() { return "(Build Aug 29 2017 11:40:47)"; }
    
    public void link(com.heirloomcomputing.etp.transaction.api.TransactionEnvironment _transactionEnvironment,com.heirloomcomputing.etp.transaction.link.CommArea _commArea,com.heirloomcomputing.etp.transaction.bridge.BridgeFacility _facility,com.heirloomcomputing.etp.transaction.link.Environment _environment)
    {
        _setTransactionEnvironment(_transactionEnvironment);
        // Setup basic program functionality
        if(_context==null) setup(_context);
        _context.setProgramCalled();
        com.heirloomcomputing.etp.transaction.link.CommArea _previousCommArea=_transactionEnvironment.getCommArea();
        _transactionEnvironment.setCommArea(_commArea);
        if(_commArea!=null)
        {
            lnk.dfhcommarea.setPointerToBytes(_commArea.toByteArrayNoCopy());
        }
        else
        {
            lnk.dfhcommarea.setPointerToBytes((byte[])null);
        }
        lnk.dfheiblk.setPointerToBytes(_transactionEnvironment.getEIB());
        java.util.Calendar _cal=_transactionEnvironment.getTaskStartTime();
        if(_cal!=null)
        {
            int _cal_c=_cal.get(java.util.Calendar.YEAR)/100-19;
            int _cal_y=_cal.get(java.util.Calendar.YEAR)%100;
            int _cal_d=_cal.get(java.util.Calendar.DAY_OF_YEAR);
            lnk.eibdate_OF_dfheiblk.move(_cal_c*100000+_cal_y*1000+_cal_d);
            int _cal_h=_cal.get(java.util.Calendar.HOUR_OF_DAY);
            int _cal_m=_cal.get(java.util.Calendar.MINUTE);
            int _cal_s=_cal.get(java.util.Calendar.SECOND);
            lnk.eibtime_OF_dfheiblk.move(_cal_h*10000+_cal_m*100+_cal_s);
        }
        lnk.eibtaskn_OF_dfheiblk.move(_transactionEnvironment.getTransactionNumber());
        lnk.eibtrmid_OF_dfheiblk.move(_transactionEnvironment.getTerminalId());
        lnk.eibtrnid_OF_dfheiblk.move(_transactionEnvironment.getTransactionId());
        lnk.eibcposn_OF_dfheiblk.move(_transactionEnvironment.getCursorPosition());
        lnk.eibaid_OF_dfheiblk.move(_transactionEnvironment.getAID());
        if(_commArea!=null)
        {
            lnk.eibcalen_OF_dfheiblk.move(_commArea.getLength());
        }
        else
        {
            lnk.eibcalen_OF_dfheiblk.move(0);
        }
        _callArrayInitializer();
        // Call program
        try
        {
            this.run(-1,0);
        }
        finally
        {
            _transactionEnvironment.setCommArea(_previousCommArea);
        }
        _callArrayFinalizer();
    }
    
    
    public void run() // Runnable
    {
        try
        {
            run(-1,-1);
        }
        catch(UnwindException _unwindException)
        {
            return; // completely unwound
        }
        catch(Throwable _anyException)
        {
            CobolException.runtimeError(_context,_anyException);
        }
    }
    
    public void run(int _thread,int _entry) // ICobolInterface
    {
        if(_context==null)
        {
            if(_entry<0) _entry=0;
            setup(null);
        }
        else
        {
            if(_entry<0) _entry=_context.getEntryParagraph();
            _context.setEntryParagraph(0);
        }
        try
        {
            perform(_entry,-1);
            return;
        }
        catch(ExitProgramException _exitProgramException)
        {
            return; // goback
        }
    }
    
    public String redirectCall()
    {
        return null;
    }
    
    static public void main(String _args[]) // application entry
    {
        test _programInstance=null;
        try
        {
            _programInstance = new test();
            Context.initializeApplication(_programInstance,_args);
            if(_args!=null && _args.length>0)
            {
                _programInstance.setup(null);
                if(_args.length>0) _programInstance.setDfheiblk(_args[0]);
                if(_args.length>1) _programInstance.setDfhcommarea(_args[1]);
            }
            _programInstance.run(-1,-1);
            _programInstance._transenv.end();
            _programInstance._context.exit();
        }
        catch(Throwable _throwableException)
        {
            if (_programInstance != null && _programInstance._context != null && _programInstance._context.getReturnInt() == 0) 
            {
                   _programInstance._context.setReturnCode(1);
                   Context.appReturnCode = _programInstance._context.getReturnInt();
            }
            if(_programInstance!=null&&_programInstance._transenv!=null) _programInstance._transenv.abend(_throwableException,CobolException.isDumpRequested(_throwableException),CobolException.getDumpMessage(_throwableException));
        }
        Context.applicationExit();
    }
    
    public transient Context _context;
    
    public Context setup(Context _passContext)
    {
        _context=_passContext;
        if(_context==null) // create fresh context
        {
            _context=new Context(_passContext,_programId,this);
        }
        else
            _context.setupContext(_passContext,_programId,this);
        lnk=(Lnk)_context.getLnk();
        boolean doInitLnk=false;
        boolean doDeclareLnk=false;
        if(lnk==null)
        {
            doInitLnk=true;
            doDeclareLnk=true;
            _context.setLnk(lnk=new Lnk());
        }
        if(doInitLnk) lnk.doInitializations();
        
        
        if(doDeclareLnk) lnk.doDeclarations();
        // Set the transaction environment from Context
        if(_passContext!=null) _setTransactionEnvironment((com.heirloomcomputing.etp.transaction.api.TransactionEnvironment)_passContext.getTransactionEnvironment());
        return _context;
    }
    com.heirloomcomputing.etp.transaction.api.TransactionEnvironment _transenv;
    
    public void _setTransactionEnvironment(com.heirloomcomputing.etp.transaction.api.TransactionEnvironment _environment)
    {
        if(_environment==_transenv || _environment==null) return;
        if(_context==null) setup(null);
        _transenv=_environment;
        _context.setTransactionEnvironment(_transenv);
    }
    
    
    public void cancel() // close open files, chance for custom action
    {
    } // end cancel
    
    
    public void close() // close any resources that might have been left open
    {
        if(_context.getExistingSqlContext() != null)
        {
            _context.getExistingSqlContext().getCursors().closeAll();
        }
    } // end close
    
    public void perform(int _procedure) // ICobolInterface
    {
        perform(_procedure,_procedure); // only procedure
    }
    
    public void perform(int _begin,int _end) // ICobolInterface
    {
        _debug_loadWatchpoints(_context.getProgramName());
        try
        {
            for(;;) // forever until stopped
            {
                switch(_begin)
                {
                    
                    case 0: // Initial Paragraph
                    case 1: if( (_begin=defaultpara_1_OF_defaultsection_0()) != 0) break;
                    
                    if(_end==1) { return   ; } // end SECTION -=-=-=-=-=-=-
                    
                    default: throw ExitProgramException.EXIT_DEFAULT;
                } // end switch
            } // end forever
        }
        catch(UnwindException _unwindException)
        {
            perform(_unwindException.unwind(_context,this),_end);
            return;
        }
        catch(ExitProgramException _exitProgramException)
        {
            throw _exitProgramException;
        }
        catch(Throwable _runtimeException)
        {
            int _resumeAt=_exceptionHandler(_runtimeException,false);
            if(_resumeAt>0) perform(_resumeAt,_resumeAt);
            else throw ExitProgramException.EXIT_RESUME;
        }
    } // end perform(int,int)
    
    public int _exceptionHandler(Throwable _exception,boolean _nextStatementAvailable)
    {
        $X$_exceptionInfo = String.valueOf(_exception.getStackTrace()[0].getLineNumber());
        // if debugging in Eclipse pause 
        CobolExceptionPause cbp = new CobolExceptionPause();
        if(_exception instanceof RuntimeException) throw (RuntimeException)_exception;
        if(_exception instanceof Error) throw (Error)_exception;
        throw new com.heirloomcomputing.ecs.exception.EcObject(_exception);
    }
    
    static public final String _localNameConverter[][]=null;
    
    public void _callArrayInitializer()
    {
        Variable.initializeInternalArray();
    }
    
    public void _callArrayFinalizer()
    {
        Variable.finalizeInternalArray();
    }
    
} // end program test